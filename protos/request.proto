syntax = "proto3";

package request;

service KarlController {
  rpc SensorRegister (RegisterRequest) returns (RegisterResult);
}

enum MessageType {
  RAW_BYTES = 0;
  PING_REQUEST = 1;
  PING_RESULT = 2;
  COMPUTE_REQUEST = 3;
  COMPUTE_RESULT = 4;
  REGISTER_HOOK = 5;
  REGISTER_REQUEST = 6;
  REGISTER_RESULT = 7;
  NOTIFY_START = 8;
  NOTIFY_END = 9;
  HOST_HEARTBEAT = 10;
  HOST_REGISTER_REQUEST = 11;
  PUT_DATA = 12;
  GET_DATA = 13;
  GET_DATA_RESULT = 14;
  DELETE_DATA = 15;
  NETWORK_ACCESS = 16;
}

message PutData {
  uint32 process_id = 1;
  string path = 2;
  bytes data = 3;
}

message GetData {
  uint32 process_id = 1;
  string path = 2;
}

message DeleteData {
  uint32 process_id = 1;
  string path = 2;
}

message GetDataResult {
  bytes data = 1;
}

message NetworkAccess {
  uint32 process_id = 1;
  string domain = 2;
}

message FileACL {
  string path = 1;
  bool read = 2;
  bool write = 3;
}

message ComputeRequest {
  string request_token = 1;
  bytes package = 2;
  string binary_path = 3;
  repeated string args = 4;
  repeated string envs = 5;
  repeated FileACL file_perm = 6;
  repeated string network_perm = 7;
}

message ComputeResult {
  bytes stdout = 1;
  bytes stderr = 2;
  map<string, bytes> files = 3;
}

message PingRequest {
}

message PingResult {
}

message RegisterHook {
  string client_token = 1;
  string global_hook_id = 2;
  repeated string envs = 3;
  repeated FileACL file_perm = 4;
  repeated string network_perm = 5;
}

message RegisterRequest {
  string id = 1;
  bytes app = 2;
}

message RegisterResult {
  string client_token = 1;
}

message NotifyStart {
  string service_name = 1;
  string description = 2;
}

message NotifyEnd {
  string service_name = 1;
  string request_token = 2;
}

message HostHeartbeat {
  string service_name = 1;
  string request_token = 2;
}

message HostRegisterRequest {
  string service_name = 1;
  string ip = 2;
  uint32 port = 3;
  string password = 4;
}
