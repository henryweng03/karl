syntax = "proto3";

import "google/protobuf/empty.proto";
package request;

service KarlHost {
  rpc StartCompute (ComputeRequest) returns (NotifyStart);
  rpc Network (NetworkAccess) returns (NetworkAccessResult);            // TODO
  rpc Get (GetData) returns (GetDataResult);                            // TODO
  rpc Put (PutData) returns (google.protobuf.Empty);                    // TODO
  rpc Delete (DeleteData) returns (google.protobuf.Empty);              // TODO
  rpc State (StateChange) returns (google.protobuf.Empty);              // TODO
}

service KarlController {
  // hosts
  rpc HostRegister (HostRegisterRequest) returns (HostRegisterResult);
  rpc ForwardNetwork (NetworkAccess) returns (google.protobuf.Empty);   // TODO
  rpc ForwardGet (GetData) returns (GetDataResult);                     // TODO
  rpc ForwardPut (PutData) returns (google.protobuf.Empty);             // TODO
  rpc ForwardDelete (DeleteData) returns (google.protobuf.Empty);       // TODO
  rpc ForwardState (StateChange) returns (google.protobuf.Empty);       // TODO
  rpc FinishCompute (NotifyEnd) returns (google.protobuf.Empty);
  rpc Heartbeat (HostHeartbeat) returns (google.protobuf.Empty);

  // sensors
  rpc SensorRegister (SensorRegisterRequest) returns (SensorRegisterResult);
  rpc PushRawData (SensorPushData) returns (google.protobuf.Empty);

  // users
  rpc AuditFile (AuditRequest) returns (AuditResult);                         // TODO
  rpc VerifySensor (VerifySensorRequest) returns (google.protobuf.Empty);     // TODO
  rpc VerifyHost (VerifyHostRequest) returns (google.protobuf.Empty);         // TODO
  rpc RegisterHook (RegisterHookRequest) returns (google.protobuf.Empty);
}

/****************************************************************************
 * HostService
 ****************************************************************************/

message FileACL {
  string path = 1;
  bool read = 2;
  bool write = 3;
}

message ComputeRequest {
  string host_token = 1;
  bytes package = 2;
  string binary_path = 3;
  repeated string args = 4;
  repeated string envs = 5;
  repeated FileACL file_perm = 6;
  repeated string network_perm = 7;
}

message NotifyStart {
  string process_token = 1;
}

message NetworkAccess {
  string host_token = 1;
  uint32 process_token = 2;
  string domain = 3;
  string protocol = 4;
  bytes data = 5;
}

message NetworkAccessResult {
  bytes data = 1;
}

message GetData {
  string host_token = 1;
  uint32 process_token = 2;
  string sensor_id = 3;
  string path = 4;
}

message GetDataResult {
  bytes data = 1;
}

message PutData {
  string host_token = 1;
  uint32 process_token = 2;
  string sensor_id = 3;
  string path = 4;
  bytes data = 5;
}

message DeleteData {
  string host_token = 1;
  uint32 process_token = 2;
  string sensor_id = 3;
  string path = 4;
}

message StateChange {
  string host_token = 1;
  string process_token = 2;
  string sensor_id = 3;
  string key = 4;
  string value = 5;
}

/****************************************************************************
 * ControllerService
 ****************************************************************************/

// hosts

message HostRegisterRequest {
  string host_id = 1;
  string ip = 2;
  uint32 port = 3;
  string password = 4;
}

message HostRegisterResult {
  string host_token = 1;
}

message NotifyEnd {
  string host_token = 1;
  string process_token = 2;
}

message HostHeartbeat {
  string host_token = 1;
}

// sensors

message SensorRegisterRequest {
  string global_sensor_id = 1;
  bytes app = 2;
}

message SensorRegisterResult {
  string sensor_token = 1;
  string sensor_id = 2;
}

message SensorPushData {
  string sensor_token = 1;
  bytes data = 2;
}

// users

message AuditRequest {
  string user_token = 1;
  // TODO
}

message AuditResult {
  // TODO
}

message VerifySensorRequest {
  string user_token = 1;
  string sensor_id = 2;
}

message VerifyHostRequest {
  string user_token = 1;
  string host_id = 2;
}

message RegisterHookRequest {
  string token = 1;
  string global_hook_id = 2;
  repeated string envs = 3;
  repeated FileACL file_perm = 4;
  repeated string network_perm = 5;
}
